{"version":3,"file":"app~7bd12dde.bundle.js","mappings":";0YACA,gnGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,kkBAEA,IAAQC,EAAuDC,EAAAA,EAAAA,cAAxCC,EAAwCD,EAAAA,EAAAA,iBAAtBE,EAAsBF,EAAAA,EAAAA,kBAEzDG,GAAYC,EAAAA,EAAAA,IAAOL,EAAeE,EAAkB,CACxDI,QAAO,SAACC,GACNA,EAASC,kBAAkBL,EAAmB,CAAEM,QAAS,MAC3D,IA6BF,QA1B8B,CACtBC,cAAa,SAACC,GAAI,oGACjBA,EAAI,CAAF,gEAIOP,EAAS,uCAAEQ,IAAIT,EAAmBQ,IAAE,0CAL5B,EAMxB,EAEME,kBAAiB,WAAG,iHACVT,EAAS,uCAAEU,OAAOX,IAAiB,0CADzB,EAE1B,EAEMY,cAAa,SAACC,GAAY,oGACzBA,EAAWC,eAAe,MAAO,CAAF,gEAItBb,EAAS,uCAAEc,IAAIf,EAAmBa,IAAU,0CAL5B,EAMhC,EAEMG,iBAAgB,SAACR,GAAI,iHACXP,EAAS,8CAASD,EAAmBQ,IAAE,0CAD5B,EAE3B,+CCzBF,QAPqB,CACnBS,gBAAiB,GAAF,OAAKnB,EAAAA,EAAAA,SAAe,QACnCoB,kBAAmB,SAACV,GAAE,gBAAQV,EAAAA,EAAAA,SAAe,kBAAUU,EAAE,sPCH3D,irOA4BA,QA3BwB,yBADxB,4FACwB,SADxB,QAYG,EANA,EALqB,EAwBrB,OAzBH,EACwB,OADxB,EACwB,4CACtB,sGACyBW,MAAMC,EAAAA,iBAA6B,OAA5C,OAARC,EAAW,EAAH,cACaA,EAASC,OAAM,OAAxB,OAAZC,EAAe,EAAH,uBACXA,EAAaC,aAAW,2CAChC,0FAED,WAA8BhB,GAAE,yFACPW,MAAMC,EAAAA,kBAA+BZ,IAAI,OAAlD,OAARa,EAAW,EAAH,cACaA,EAASC,OAAM,OAAxB,OAAZC,EAAe,EAAH,uBACXA,EAAaV,YAAU,2CAC/B,2FAED,WAA8BY,GAAI,2EAO/B,OANKC,EAAS,CACbC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUN,IACtB,SACsBN,MAAMC,EAAAA,YAA0BM,GAAO,OAAhD,OAARL,EAAW,EAAH,cACaA,EAASC,OAAM,OAAxB,OAAZC,EAAe,EAAH,uBACXA,GAAY,2CACpB,+CAzBH,6DAyBG,EAxBqB,mCCOxB,QATe,CACbS,SAAU,uCACVC,eAAgB,qDAChBC,YAAY,IAAIC,MAAOC,cACvBvC,cAAe,sBACfE,iBAAkB,EAClBC,kBAAmB,qFCEfqC,EAAM,IAAIC,EAAAA,EAAI,CAClBC,OAAQC,SAASC,cAAc,oBAC/BC,OAAQF,SAASC,cAAc,qBAC/BE,QAASH,SAASC,cAAc,kBAGlCG,OAAOC,iBAAiB,cAAc,WACpCR,EAAIS,YACN,IAEAF,OAAOC,iBAAiB,QAAQ,WAC9BR,EAAIS,cACJC,EAAAA,EAAAA,IACF","sources":["webpack://restaurant-apps/./src/scripts/data/favorite-restaurant-idb.js","webpack://restaurant-apps/./src/scripts/globals/api-endpoint.js","webpack://restaurant-apps/./src/scripts/data/restaurantdb-source.js","webpack://restaurant-apps/./src/scripts/globals/config.js","webpack://restaurant-apps/./src/scripts/index.js"],"sourcesContent":["import { openDB } from 'idb';\r\nimport CONFIG from '../globals/config';\r\n\r\nconst { DATABASE_NAME, DATABASE_VERSION, OBJECT_STORE_NAME } = CONFIG;\r\n\r\nconst dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\r\n  upgrade(database) {\r\n    database.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' });\r\n  },\r\n});\r\n\r\nconst FavoriteRestaurantIdb = {\r\n  async getRestaurant(id) {\r\n    if (!id) {\r\n      return;\r\n    }\r\n    \r\n    return (await dbPromise).get(OBJECT_STORE_NAME, id);\r\n  },\r\n\r\n  async getAllRestaurants() {\r\n    return (await dbPromise).getAll(OBJECT_STORE_NAME);\r\n  },\r\n\r\n  async putRestaurant(restaurant) {\r\n    if (!restaurant.hasOwnProperty('id')) {\r\n      return;\r\n    }\r\n    \r\n    return (await dbPromise).put(OBJECT_STORE_NAME, restaurant);\r\n  },\r\n\r\n  async deleteRestaurant(id) {\r\n    return (await dbPromise).delete(OBJECT_STORE_NAME, id);\r\n  },\r\n};\r\n\r\nexport default FavoriteRestaurantIdb;\r\n","import CONFIG from './config';\r\n\r\nconst API_ENDPOINT = {\r\n  RESTAURANT_LIST: `${CONFIG.BASE_URL}list`,\r\n  RESTAURANT_DETAIL: (id) => `${CONFIG.BASE_URL}detail/${id}`,\r\n  // SEARCH_RESTAURANT: (q) => `${CONFIG.BASE_URL}search?q=query`,\r\n  // REVIEW: `${CONFIG.BASE_URL}review/`,\r\n};\r\n\r\nexport default API_ENDPOINT;\r\n","import API_ENDPOINT from '../globals/api-endpoint';\r\n\r\nclass RestaurantDbSource {\r\n  static async restaurantList() {\r\n    const response = await fetch(API_ENDPOINT.RESTAURANT_LIST);\r\n    const responseJson = await response.json();\r\n    return responseJson.restaurants;\r\n  }\r\n\r\n  static async restaurantDetail(id) {\r\n    const response = await fetch(API_ENDPOINT.RESTAURANT_DETAIL(id));\r\n    const responseJson = await response.json();\r\n    return responseJson.restaurant;\r\n  }\r\n\r\n  static async reviewRestaurant(data) {\r\n    const review = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n    };\r\n    const response = await fetch(API_ENDPOINT.POST_REVIEW, review);\r\n    const responseJson = await response.json();\r\n    return responseJson;\r\n  }\r\n}\r\n\r\nexport default RestaurantDbSource;\r\n","const CONFIG = {\r\n  BASE_URL: 'https://restaurant-api.dicoding.dev/',\r\n  BASE_IMAGE_URL: 'https://restaurant-api.dicoding.dev/images/medium/',\r\n  CACHE_NAME: new Date().toISOString(),\r\n  DATABASE_NAME: 'restaurant-database',\r\n  DATABASE_VERSION: 1,\r\n  OBJECT_STORE_NAME: 'restaurants',\r\n};\r\n\r\nexport default CONFIG;\r\n","import 'regenerator-runtime'; /* for async await transpile */\nimport '../styles/main.css';\nimport '../styles/responsive.css';\nimport 'lazysizes';\nimport 'lazysizes/plugins/parent-fit/ls.parent-fit';\nimport App from './views/app';\nimport swRegister from './utils/sw-register';\n\nconst app = new App({\n  button: document.querySelector('#hamburgerButton'),\n  drawer: document.querySelector('#navigationDrawer'),\n  content: document.querySelector('#mainContent'),\n});\n\nwindow.addEventListener('hashchange', () => {\n  app.renderPage();\n});\n\nwindow.addEventListener('load', () => {\n  app.renderPage();\n  swRegister();\n});\n"],"names":["i","DATABASE_NAME","CONFIG","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","openDB","upgrade","database","createObjectStore","keyPath","getRestaurant","id","get","getAllRestaurants","getAll","putRestaurant","restaurant","hasOwnProperty","put","deleteRestaurant","RESTAURANT_LIST","RESTAURANT_DETAIL","fetch","API_ENDPOINT","response","json","responseJson","restaurants","data","review","method","headers","body","JSON","stringify","BASE_URL","BASE_IMAGE_URL","CACHE_NAME","Date","toISOString","app","App","button","document","querySelector","drawer","content","window","addEventListener","renderPage","swRegister"],"sourceRoot":""}